/*
Copyright (c) 2016 Robert Atkinson




All rights reserved.




Redistribution and use in source and binary forms, with or without modification,
are permitted (subject to the limitations in the disclaimer below) provided that
the following conditions are met:




Redistributions of source code must retain the above copyright notice, this list
of conditions and the following disclaimer.




Redistributions in binary form must reproduce the above copyright notice, this
list of conditions and the following disclaimer in the documentation and/or
other materials provided with the distribution.




Neither the name of Robert Atkinson nor the names of his contributors may be used to
endorse or promote products derived from this software without specific prior
written permission.




NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS
LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
"AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESSFOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
package org.firstinspires.ftc.teamcode;




import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.util.ElapsedTime;
//package org.firstinspires.ftc.teamcode;

import android.app.Activity;
import android.graphics.Color;
import android.view.View;

import com.qualcomm.ftcrobotcontroller.R;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.ColorSensor;


//import org.firstinspires.ftc.robotcontroller.external.samples.HardwarePushbot;


/**
* This file illustrates the concept of driving a path based on encoder counts.
* It uses the common Pushbot hardware class to define the drive on the robot.
* The code is structured as a LinearOpMode
*
* The code REQUIRES that you DO have encoders on the wheels,
*   otherwise you would use: PushbotAutoDriveByTime;
*
*  This code ALSO requires that the drive Motors have been configured such that a positive
*  power command moves them forwards, and causes the encoders to count UP.
*
*   The desired path in this example is:
*   - Drive forward for 48 inches
*   - Spin right for 12 Inches
*   - Drive Backwards for 24 inches
*   - Stop and close the claw.
*
*  The code is written using a method called: encoderDrive(speed, leftInches, rightInches, timeoutS)
*  that performs the actual movement.
*  This methods assumes that each movement is relative to the last stopping place.
*  There are other ways to perform encoder based moves, but this method is probably the simplest.
*  This code uses the RUN_TO_POSITION mode to enable the Motor controllers to generate the run profile
*
* Use Android Studios to Copy this Class, and Paste it into your team's code folder with a new name.
* Remove or comment out the @Disabled line to add this opmode to the Driver Station OpMode list
*/




@Autonomous(name="Athenabot: AutoRed2", group="Athenabot")
//@Disabled
public class AthenaAutoRed2 extends LinearOpMode {


   /* Declare OpMode members. */
   HardwareMechanumAthenabot robot = new HardwareMechanumAthenabot();   // Use Athenabot's hardware
   private ElapsedTime runtime = new ElapsedTime();


   static final double COUNTS_PER_MOTOR_REV = 1440.0;    // eg: TETRIX Motor Encoder, 360*4
   static final double DRIVE_GEAR_REDUCTION = 2.0;     // This is < 1.0 if geared UP
   static final double WHEEL_DIAMETER_INCHES = 4.0;     // For figuring circumference
   //static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
   // (WHEEL_DIAMETER_INCHES * 3.1415);
   static final double COUNTS_PER_INCH = (COUNTS_PER_MOTOR_REV * DRIVE_GEAR_REDUCTION) /
           (WHEEL_DIAMETER_INCHES * 3.1415);
   static final double DRIVE_SPEED = 0.7;
   static final double TURN_SPEED = 0.6;
   static final double BK_APPROACH_SPEED = 0.7;  // Beacon approach speed
   static final double WHEEL_SEPARATION = 16.75;  // Distance between two front(or  back) wheels
   static final double PERFECT_WHITE_VALUE = 0.2; // Incremental value over ambient light for white line detection
   static final int BK_BLUE_H_THRESHOLD = 25; // Beacon blue color high threshold value
   static final int BK_RED_L_THRESHOLD = 5; // Beacon red color low threshold
   static final int BK_RED_H_THRESHOLD = 25; // Beacon red color threshold value
   static final int BK_BLUE_L_THRESHOLD = 5; // Beacon blue color low threshold
   static final int BK_ALPHA_THRESHOLD = 25; // alpha threshold for beacon within range
   // static final double LEFT_ARM_OPEN = 0.5; // Offset for arm in front position

   private double ambient_light = 0.0;


   // Change these distance values in inches
   static final int D1 = 5;  // Goes forward
   static final int R1_ANGLE = 45; // right turn
   //static final int D2 = 24; // goes forward
   //static final int L2_ANGLE =  90; // left turn
   //static final int D3 = 18;  // goes forward to park
   //static final int L2_ANGLE = 45


   // hsvValues is an array that will hold the hue, saturation, and value information.
   float hsvValues[] = {0F, 0F, 0F};


   // values is a reference to the hsvValues array.
   final float values[] = hsvValues;


   @Override
   public void runOpMode() throws InterruptedException {




/*
 * Initialize the drive system variables.
 * The init() method of the hardware class does all the work here
 */
       robot.init(hardwareMap);


       // Send telemetry message to signify robot waiting;
       telemetry.addData("Status", "Resetting Encoders");    //
       telemetry.update();

       // turn on LED of light sensor.
       if (robot.LightSensorBottom != null) {
           robot.LightSensorBottom.enableLed(true);
       }


       //robot.left_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       //robot.right_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       //idle();
       reset_drive_encoders();


       //robot.left_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       //robot.right_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       run_using_encoders();


       // Send telemetry message to indicate successful Encoder reset
       telemetry.addData("Path0", "Starting at %7d :%7d",
               robot.left_back_drv_Motor.getCurrentPosition(),
               robot.right_back_drv_Motor.getCurrentPosition());
       telemetry.update();


       // Wait for the game to start (driver presses PLAY)
       //waitForStart();
       // Wait for the game to start (driver presses PLAY)
       while (!isStarted()) {

           if (robot.LightSensorBottom != null) {
               ambient_light = robot.LightSensorBottom.getLightDetected();
               // Display the light level while we are waiting to start
               telemetry.addData("Amb Light Level", robot.LightSensorBottom.getLightDetected());
               telemetry.update();
           }
           idle();
       }


       //drive_until_line_reached(5); // Find white line within 5 secs

       //follow_white_line(5);  // Follow the line

       // Move instructions begin---------------------------------------------------
       move_right(D1,3);
       move_forward(D1, 3);

       //move_left(D1,3);
       //turn_right(R1_ANGLE);
       //move_backward(D2, 5);
       //turn_left(L2_ANGLE);
       //move_forward(D2, 2);
       // Move instructions end


       telemetry.addData("Path", "Complete");
       telemetry.update();
   }


   /*
    *  Method to perform a relative move, based on encoder counts.
    *  Encoders are not reset as the move is based on the current position.
    *  Move will stop if any of three conditions occur:
    *  1) Move gets to the desired position
    *  2) Move runs out of time
    *  3) Driver stops the opmode running.
    */
   public void encoderDrive(double speed,
                            double leftInches, double rightInches,
                            double timeoutS) throws InterruptedException {
       int newLeftTarget;
       int newRightTarget;


       // Ensure that the opmode is still active
       if (opModeIsActive()) {

           telemetry.addData
                   ("01"
                           , "Right Distance: "
                                   + rightInches);
           telemetry.addData
                   ("02"
                           , "Left Distance: "
                                   + leftInches);

           //  telemetry.update();
           telemetry.addData
                   ("03"
                           , "Counts Per Inch: "
                                   + COUNTS_PER_INCH);


           telemetry.update();


           // Determine new target position, and pass to motor controller
           newLeftTarget = robot.left_back_drv_Motor.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);
           newRightTarget = robot.right_back_drv_Motor.getCurrentPosition() + (int) (rightInches * COUNTS_PER_INCH);


           //robot.left_front_drv_Motor.setTargetPosition(newLeftTarget);
           robot.left_back_drv_Motor.setTargetPosition(newLeftTarget);
           //robot.right_front_drv_Motor.setTargetPosition(newRightTarget);
           robot.right_back_drv_Motor.setTargetPosition(newRightTarget);


           // Turn On RUN_TO_POSITION
           //robot.left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           //robot.right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);


           // reset the timeout time and start motion.
           runtime.reset();


           robot.left_front_drv_Motor.setPower(Math.abs(speed));
           robot.right_front_drv_Motor.setPower(Math.abs(speed));
           robot.left_back_drv_Motor.setPower(Math.abs(speed));
           robot.right_back_drv_Motor.setPower(Math.abs(speed));


           // keep looping while we are still active, and there is time left, and both motors are running.
           while (opModeIsActive() &&
                   (runtime.seconds() < timeoutS) &&
                   (robot.left_back_drv_Motor.isBusy() && robot.right_back_drv_Motor.isBusy())) {


               // Display it for the driver.
               telemetry.addData("Path1", "Running to %7d :%7d", newLeftTarget, newRightTarget);
               telemetry.addData("Path2", "Running at %7d :%7d : %7d :%7d",
                       robot.left_front_drv_Motor.getCurrentPosition(),
                       robot.right_front_drv_Motor.getCurrentPosition(),
                       robot.left_back_drv_Motor.getCurrentPosition(),
                       robot.right_back_drv_Motor.getCurrentPosition());
               telemetry.update();


               // Allow time for other processes to run.
               idle();
           }


           // Stop all motion;
           robot.left_front_drv_Motor.setPower(0);
           robot.right_front_drv_Motor.setPower(0);
           robot.right_back_drv_Motor.setPower(0);
           robot.left_back_drv_Motor.setPower(0);


           // Turn off RUN_TO_POSITION
           //robot.left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           //robot.right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


           sleep(250);   // optional pause after each move
       }
   }


   /*
    *  Method to perform a relative move, based on encoder counts.
    *  Encoders are not reset as the move is based on the current position.
    *  Move will stop if any of three conditions occur:
    *  1) Move gets to the desired position
    *  2) Move runs out of time
    *  3) Driver stops the opmode running.
    */
   public void encoderStraf(double speed,
                            double leftInches,
                            double timeoutS) throws InterruptedException {
       int newLeftTarget;
       int newRightTarget;


       // Ensure that the opmode is still active
       if (opModeIsActive()) {

           telemetry.addData
                   ("01"
                           , "Straf Distance: "
                                   + leftInches);

           //  telemetry.update();
           telemetry.addData
                   ("02"
                           , "Counts Per Inch: "
                                   + COUNTS_PER_INCH);


           telemetry.update();


           // Determine new target position, and pass to motor controller
           newLeftTarget = robot.left_back_drv_Motor.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);
           newRightTarget = robot.right_back_drv_Motor.getCurrentPosition() + (int) (leftInches * COUNTS_PER_INCH);


           //robot.left_front_drv_Motor.setTargetPosition(newLeftTarget);
           robot.left_back_drv_Motor.setTargetPosition(newLeftTarget);
           //robot.right_front_drv_Motor.setTargetPosition(newRightTarget);
           robot.right_back_drv_Motor.setTargetPosition(newRightTarget);


           // Turn On RUN_TO_POSITION
           //robot.left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           //robot.right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_TO_POSITION);


           // reset the timeout time and start motion.
           runtime.reset();


           robot.left_front_drv_Motor.setPower(Math.abs(speed));
           robot.right_front_drv_Motor.setPower(Math.abs(speed));
           robot.left_back_drv_Motor.setPower(Math.abs(speed));
           robot.right_back_drv_Motor.setPower(Math.abs(speed));


           // keep looping while we are still active, and there is time left, and both motors are running.
           while (opModeIsActive() &&
                   (runtime.seconds() < timeoutS) &&
                   (robot.left_back_drv_Motor.isBusy() && robot.right_back_drv_Motor.isBusy())) {


               // Display it for the driver.
               telemetry.addData("Path1", "Running to %7d :%7d", newLeftTarget, newRightTarget);
               telemetry.addData("Path2", "Running at %7d :%7d : %7d :%7d",
                       robot.left_front_drv_Motor.getCurrentPosition(),
                       robot.right_front_drv_Motor.getCurrentPosition(),
                       robot.left_back_drv_Motor.getCurrentPosition(),
                       robot.right_back_drv_Motor.getCurrentPosition());
               telemetry.update();


               // Allow time for other processes to run.
               idle();
           }


           // Stop all motion;
           robot.left_front_drv_Motor.setPower(0);
           robot.right_front_drv_Motor.setPower(0);
           robot.right_back_drv_Motor.setPower(0);
           robot.right_back_drv_Motor.setPower(0);


           // Turn off RUN_TO_POSITION
           //robot.left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           //robot.right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);


           sleep(250);   // optional pause after each move
       }
   }


   //--------------------------------------------------------------------------
   //
   // reset_drive_encoders
   //


   /**
    * Reset both drive wheel encoders.
    */
   public void reset_drive_encoders() throws InterruptedException {
       //
       // Reset the motor encoders on the drive wheels.
       //
   /*
   if (robot.left_front_drv_Motor != null) {
       robot.left_front_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
   }
   if (robot.right_front_drv_Motor != null) {
       robot.right_front_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
   }
   */
       if (robot.left_back_drv_Motor != null) {
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       }
       if (robot.right_back_drv_Motor != null) {
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.STOP_AND_RESET_ENCODER);
       }


       idle();
   } // reset_drive_encoders


   //--------------------------------------------------------------------------
   //
   // run_using_left_drive_encoder
   //


   /**
    * Set the left and right drive wheel encoder to run, if the mode is appropriate.
    */
   public void run_using_encoders() {
   /*
   if (robot.left_front_drv_Motor != null) {
       robot.left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
   }
   if (robot.right_front_drv_Motor != null) {
       robot.right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
   }
   */
       if (robot.left_back_drv_Motor != null) {
           robot.left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       }
       if (robot.right_back_drv_Motor != null) {
           robot.right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_USING_ENCODER);
       }


   } // run_using_drive_encoder


   /**
    * Calculate distance in inches for a two wheel right turn.
    * Dist = Arc length to be traversed by each wheel in opposite direction
    * = (WHEEL_SEPARATION/2)*degrees*(Math.PI/180.0)
    * = ((degrees * Math.PI * WHEEL_SEPARATION) / 360.0)
    */
   public void turn_right(int degrees) throws InterruptedException {
       // Calculate distance for the required degree turn
       double turn_dist = (degrees * Math.PI * WHEEL_SEPARATION) / 360.0;


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {
           encoderDrive(TURN_SPEED, -turn_dist, turn_dist, 2.0);
       }
   }


   /**
    * Calculate distance in inches for a two wheel left turn.
    * Dist = Arc length to be traversed by each wheel in opposite direction
    * = (WHEEL_SEPARATION/2)*degrees*(Math.PI/180.0)
    * = ((degrees * Math.PI * WHEEL_SEPARATION) / 360.0)
    */
   public void turn_left(int degrees) throws InterruptedException {
       // Calculate distance for the required degree turn
       double turn_dist = (degrees * Math.PI * WHEEL_SEPARATION) / 360.0;


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {

           encoderDrive(TURN_SPEED, turn_dist, -turn_dist, 2.0);
       }
   }


   /**
    * Drive both wheels with +ve distance value in inches
    */
   public void move_forward(int dist_in_inches, int timeout_in_sec) throws InterruptedException {


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {

           encoderDrive(DRIVE_SPEED, dist_in_inches, -dist_in_inches, timeout_in_sec);
       }
   }


   /**
    * Drive both wheels with +ve distance value in inches
    */
   public void move_backward(int dist_in_inches, int timeout_in_sec) throws InterruptedException {


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {

           encoderDrive(DRIVE_SPEED, -dist_in_inches, -dist_in_inches, timeout_in_sec);
       }
   }

   /**
    * Drive left using strafing a distance, value in inches
    */
   public void move_left(int dist_in_inches, int timeout_in_sec) throws InterruptedException {


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {

           encoderStraf(DRIVE_SPEED, dist_in_inches, timeout_in_sec);
       }
   }

   /**
    * Drive left using strafing a distance, value in inches
    */
   public void move_right(int dist_in_inches, int timeout_in_sec) throws InterruptedException {


       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null)) {

           encoderStraf(DRIVE_SPEED, -dist_in_inches, timeout_in_sec);
       }
   }


   /**
    * Drive until white line is seen
    */
   public void drive_until_line_reached(int timeout_in_sec) throws InterruptedException {
       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null) &&
               (robot.LightSensorBottom != null)) {
           // Start the robot moving forward, and then begin looking for a white line.
           robot.left_front_drv_Motor.setPower(DRIVE_SPEED);
           robot.right_front_drv_Motor.setPower(DRIVE_SPEED);
           robot.left_back_drv_Motor.setPower(DRIVE_SPEED);
           robot.right_back_drv_Motor.setPower(DRIVE_SPEED);

           // run until the white line is seen OR the driver presses STOP;
           while (opModeIsActive() && (runtime.seconds() < timeout_in_sec) && (robot.LightSensorBottom.getLightDetected() < (ambient_light + PERFECT_WHITE_VALUE))) {

               // Display the light level while we are looking for the line
               telemetry.addData("Light Level", robot.LightSensorBottom.getLightDetected());
               telemetry.update();
               idle(); // Always call idle() at the bottom of your while(opModeIsActive()) loop
           }

           // Stop all motors
           robot.left_front_drv_Motor.setPower(0);
           robot.right_front_drv_Motor.setPower(0);
           robot.left_back_drv_Motor.setPower(0);
           robot.right_back_drv_Motor.setPower(0);
       } else {
           telemetry.addData("Something not connected", "Drive or light_sens");
           telemetry.update();
       }

   }

   /**
    * Follow white line until beacon is close by
    */
   public void follow_white_line(int timeout_in_sec) throws InterruptedException {

       // Start the robot moving forward, and then begin looking for a white line.
       double correction;
       double leftPower;
       double rightPower;

       if ((robot.left_front_drv_Motor != null) &&
               (robot.right_front_drv_Motor != null) &&
               (robot.left_back_drv_Motor != null) &&
               (robot.right_back_drv_Motor != null) &&
               (robot.LightSensorBottom != null) &&
               (robot.colorSensor != null)) {

           // run until the white line is seen OR the driver presses STOP;
           while (opModeIsActive() && (runtime.seconds() < timeout_in_sec) && (robot.colorSensor.alpha() < BK_ALPHA_THRESHOLD)) {

               // Get a correction
               correction = (PERFECT_WHITE_VALUE - robot.LightSensorBottom.getLightDetected());

               // Sets the powers so they are no less than .075 and apply to correction
               if (correction <= 0) {
                   leftPower = .075d - correction;
                   rightPower = .075d;
               } else {
                   leftPower = .075d;
                   rightPower = .075d + correction;
               }

               // Sets the powers to the motors
               robot.left_front_drv_Motor.setPower(leftPower);
               robot.right_front_drv_Motor.setPower(rightPower);
               robot.left_back_drv_Motor.setPower(leftPower);
               robot.right_back_drv_Motor.setPower(rightPower);
               // Display the light level while we are looking for the line
               telemetry.addData("BK Alpha Level", robot.colorSensor.alpha());
               telemetry.update();
               idle(); // Always call idle() at the bottom of your while(opModeIsActive()) loop
           }

           // Stop all motors
           robot.left_front_drv_Motor.setPower(0);
           robot.right_front_drv_Motor.setPower(0);
           robot.left_back_drv_Motor.setPower(0);
           robot.right_back_drv_Motor.setPower(0);
       }
   }


   /**
    * Detect blue color
    */

   public boolean blue_color_detected(int timeout_in_sec) throws InterruptedException {

       // Start the robot moving forward, and then begin looking for a white line.
       //robot.left_drv_Motor.setPower(BK_APPROACH_SPEED);
       //robot.right_drv_Motor.setPower(BK_APPROACH_SPEED);

       //while (opModeIsActive() && (runtime.seconds() < timeout_in_sec)) {
       if ((robot.colorSensor.alpha() > BK_ALPHA_THRESHOLD) &&
               (robot.colorSensor.red() < BK_RED_L_THRESHOLD) &&
               (robot.colorSensor.blue() > BK_BLUE_H_THRESHOLD)) {
           return true;
       } else {
           return false;
       }

   }

   /**
    * Detect red color
    */

   public boolean red_color_detected(int timeout_in_sec) throws InterruptedException {

       // Start the robot moving forward, and then begin looking for a white line.
       //robot.left_drv_Motor.setPower(BK_APPROACH_SPEED);
       //robot.right_drv_Motor.setPower(BK_APPROACH_SPEED);

       //while (opModeIsActive() && (runtime.seconds() < timeout_in_sec)) {
       if ((robot.colorSensor.alpha() > BK_ALPHA_THRESHOLD) &&
               (robot.colorSensor.red() > BK_RED_H_THRESHOLD) &&
               (robot.colorSensor.blue() < BK_BLUE_L_THRESHOLD)) {
           return true;
       } else {
           return false;
       }

   }}

/**
* Hit Beacon blue button
*/

/* public void hit_blue_beacon(int timeout_in_sec) throws InterruptedException {

     while (opModeIsActive() && (runtime.seconds() < timeout_in_sec)) {
         robot.set_jewel_arm_position(robot.a_jewel_arm_position() + LEFT_ARM_OPEN);
         if (blue_color_detected(2) == true) {
             //robot.set_lefthand_position(robot.a_lefthand_position() + LEFT_ARM_OPEN);
             move_left(5, 1); // move forward for 5 inches, for 2 secs
             move_right(5, 1); // move backward for 5 inches, for 2 secs
         } else if (red_color_detected(2) == true) {
             //robot.set_lefthand_position(robot.a_lefthand_position() + LEFT_ARM_OPEN);
             robot.set_jewel_arm_position(robot.a_jewel_arm_position() - LEFT_ARM_OPEN);
             move_left(5, 1); // move forward for 5 inches, for 2 secs
             move_right(5, 1); // move backward for 5 inches, for 2 secs
         }
     }
 }*/

/**
* Hit Beacon Red button
*/

/*  public void hit_red_beacon(int timeout_in_sec) throws InterruptedException {

     while (opModeIsActive() && (runtime.seconds() < timeout_in_sec)) {
         robot.set_jewel_arm_position(robot.a_jewel_arm_position() + LEFT_ARM_OPEN);
         if (red_color_detected(2) == true) {
             //robot.set_lefthand_position(robot.a_lefthand_position() + LEFT_ARM_OPEN);
             move_left(5, 1); // move forward for 5 inches, for 2 secs
             move_right(5, 1); // move backward for 5 inches, for 2 secs
         } else if (blue_color_detected(2) == true) {
             //robot.set_lefthand_position(robot.a_lefthand_position() + LEFT_ARM_OPEN);
             robot.jewel_arm(robot.jewel_arm() - LEFT_ARM_OPEN);
             move_left(5, 1); // move forward for 5 inches, for 2 secs
             move_right(5, 1); // move backward for 5 inches, for 2 secs
         }
     }
 }
}*/






