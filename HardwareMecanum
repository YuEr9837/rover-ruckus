package org.firstinspires.ftc.teamcode;

//import com.qualcomm.ftccommon.DbgLog;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.I2cAddr;
import com.qualcomm.robotcore.hardware.LightSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.robotcore.util.Range;

//import com.qualcomm.robotcore.hardware.OpticalDistanceSensor;

/**
* This is NOT an opmode.
*
* This class can be used to define all the specific hardware for a single robot.
* In this case that robot is a Pushbot.
* See PushbotTeleopTank_Iterative and others classes starting with "Pushbot" for usage examples.
*
* This hardware class assumes the following device names have been configured on the robot:
* Note:  All names are lower case and some have single spaces between words.
*
* Motor channel:  Left  drive motor:        "left_drive"
* Motor channel:  Right drive motor:        "right_drive"
* Motor channel:  Manipulator drive motor:  "roller_drive"
* Servo channel:  Servo to open left claw:  "left_hand"
* Servo channel:  Servo to open right claw: "right_hand"
*/
public class HardwareMechanumAthenabot
{
/* Public OpMode members. */
/*
public DcMotor  left_frontdrv_Motor   = null;    // Robot left drive
public DcMotor  left_reardrv_Motor   = null;    // Robot left drive
public DcMotor  right_frontdrv_Motor  = null;    // Robot right drive
public DcMotor  right_reardrv_Motor  = null;    // Robot right drive
*/

   public DcMotor  left_front_drv_Motor   = null;    // Robot left front drive
   public DcMotor  right_front_drv_Motor  = null;    // Robot right front drive
   public DcMotor  left_back_drv_Motor   = null;    // Robot left back drive
   public DcMotor  right_back_drv_Motor  = null;    // Robot right back drive
   //public DcMotor  ball_collect_Motor    = null;  // ball collecting flap motor
   public DcMotor  extension1    = null; // Front arm to lift cap ball
   public DcMotor  linear_lift_Motor    = null; // linear slide
   public DcMotor  extension2    = null; // Catapult shooting arm

   public Servo    claw   = null; //Robot left beacon
   public Servo     jewel_arm  = null; //Robot right beacon
   //public Servo    gate   = null;      // Gate for ball shooter
   // public Servo    frnt_left_servo   = null; //Front left ball collector servo
   //  public Servo    leftlift    = null; //Robot left lift arm
   //  public Servo    rightlift   = null; //Robot right lift arm

   public ColorSensor colorSensorFront = null; // Sensor for Beacon
   public LightSensor LightSensorBottom = null; // Sensor for line following
   //public OpticalDistanceSensor odsSensor = null;  // Sensor for dist measurement

   public static final double SERVO_POS1       =  1.0  ; //
   public static final double SERVO_POS0       =  0.0 ; //
   public static final double SERVO_MID       =  0.5 ; //
   public static final double SERVO_LEFT_MIN       =  SERVO_POS0 + 0.3 ;
   public static final double SERVO_LEFT_MAX       =  SERVO_POS1 ;
   public static final double SERVO_RIGHT_MIN       =  SERVO_POS0 ;
   public static final double SERVO_RIGHT_MAX       =  SERVO_POS1 - 0.2 ;
   public static final double BALL_COLLECT_POWER    =  0.50 ;
   public static final double BALL_SHOOT_POWER    =  0.25 ;
   //public static final double BALL_SHOOT_POWER2    =  1.00 ;
   public static final double LIFT_ARM_POWER    =  0.75  ;
   public static final double LIFT_SPOOL_POWER  = 0.25 ;


   //Use MR Core Device Discovery to change address
   I2cAddr i2CAddressColorFront = I2cAddr.create8bit(0x3c);
   //I2cAddr i2CAddressColorBottom = I2cAddr.create8bit(0x4c);


   /* local OpMode members. */
   HardwareMap hwMap           =  null;
   private ElapsedTime period  = new ElapsedTime();

   /* Constructor */
   public HardwareMechanumAthenabot(){

   }

   /* Initialize standard Hardware interfaces */
   public void init(HardwareMap ahwMap) {
       // Save reference to Hardware map
       hwMap = ahwMap;

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           left_front_drv_Motor   = hwMap.dcMotor.get("l_f_drv");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_f_drv");
           //  DbgLog.msg (p_exeception.getLocalizedMessage ());

           left_front_drv_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           left_back_drv_Motor   = hwMap.dcMotor.get("l_b_drv");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_b_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           left_back_drv_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           right_front_drv_Motor   = hwMap.dcMotor.get("r_f_drv");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           right_front_drv_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           right_back_drv_Motor   = hwMap.dcMotor.get("r_b_drv");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           right_back_drv_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           linear_lift_Motor   = hwMap.dcMotor.get("lift");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           linear_lift_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           extension1   = hwMap.dcMotor.get("ext1");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           extension1 = null;
       }

       // try
       //{
       //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
       //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
       // ball_collect_Motor   = hwMap.dcMotor.get("collect");
       // }
       //catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //    DbgLog.msg (p_exeception.getLocalizedMessage ());

           //ball_collect_Motor = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           extension2   = hwMap.dcMotor.get("ext2");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           extension2 = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           claw  = hwMap.servo.get("claw");
           if (claw != null) {
               claw.setPosition(SERVO_LEFT_MIN);
           }

       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           claw = null;
       }

       try
       {
           //v_motor_left_drive = hardwareMap.dcMotor.get ("l_drv");
           //v_motor_left_drive.setDirection (DcMotor.Direction.REVERSE);
           jewel_arm    = hwMap.servo.get("jwl_arm");
           if ( jewel_arm  != null) {
               //jewel_arm.setPosition(SERVO_POS1);
               jewel_arm.setPosition(SERVO_RIGHT_MAX);
           }
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("l_drv");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());

           jewel_arm = null;
       }

     /* try
      {
          gate   = hwMap.servo.get("gate");
          if (gate != null) {
              gate.setPosition(SERVO_MID);
          }
      }
      catch (Exception p_exeception)
      {
          //m_warning_message ("l_drv");
       //   DbgLog.msg (p_exeception.getLocalizedMessage ());

          gate = null;
      }*/

       // Define and Initialize Motors
       // left_drv_Motor   = hwMap.dcMotor.get("l_drv");
       //right_drv_Motor  = hwMap.dcMotor.get("r_drv");
       //ball_left_Motor    = hwMap.dcMotor.get("l_ball");
       //ball_right_Motor   = hwMap.dcMotor.get("r_ball");
       //hor_roller_Motor   = hwMap.dcMotor.get("h_roll");


       if (left_front_drv_Motor != null)
       {
           //l_return = left_drv_Motor.getPower ();
           left_front_drv_Motor.setDirection(DcMotor.Direction.FORWARD); // FORWARD was moving it backwards
           left_front_drv_Motor.setPower(0);
           left_front_drv_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

       if (left_back_drv_Motor != null)
       {
           //l_return = left_drv_Motor.getPower ();
           left_back_drv_Motor.setDirection(DcMotor.Direction.FORWARD); // FORWARD was moving it backwards
           left_back_drv_Motor.setPower(0);
           left_back_drv_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

       if (right_front_drv_Motor != null)
       {
           //l_return = left_drv_Motor.getPower ();
           right_front_drv_Motor.setDirection(DcMotor.Direction.FORWARD);// REVERSE was moving it backwards
           right_front_drv_Motor.setPower(0);
           right_front_drv_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

       if (right_back_drv_Motor != null)
       {
           //l_return = left_drv_Motor.getPower ();
           right_back_drv_Motor.setDirection(DcMotor.Direction.FORWARD);// REVERSE was moving it backwards
           right_back_drv_Motor.setPower(0);
           right_back_drv_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

    /*  if (ball_collect_Motor != null)
      {
          //l_return = left_drv_Motor.getPower ();
          ball_collect_Motor.setPower(0);
          ball_collect_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
      }*/

       if (linear_lift_Motor != null)
       {
           //l_return = left_drv_Motor.getPower ();
           linear_lift_Motor.setPower(0);
           linear_lift_Motor.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

       if (extension1 != null)
       {
           //l_return = left_drv_Motor.getPower ();
           extension1.setPower(0);
           extension1.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

       if (extension2 != null)
       {
           //l_return = left_drv_Motor.getPower ();
           extension2.setPower(0);
           extension2.setMode(DcMotor.RunMode.RUN_WITHOUT_ENCODER);
       }

  /*
 initalize the colorSensor and colorSensor
 */
       try {
           colorSensorFront = hwMap.colorSensor.get("color");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("colr_f");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());
           colorSensorFront = null;
       }


       try {
           LightSensorBottom = hwMap.lightSensor.get("ods");
       }
       catch (Exception p_exeception)
       {
           //m_warning_message ("ods");
           //   DbgLog.msg (p_exeception.getLocalizedMessage ());
           LightSensorBottom = null;
       }


       if (colorSensorFront != null) {
           //ColorFront reads beacon light and is in passive mode
           colorSensorFront.setI2cAddress(i2CAddressColorFront);
           colorSensorFront.enableLed(false);
       }

       if (LightSensorBottom != null) {
           //OpticalDistance sensor measures dist from the beacon
           LightSensorBottom.enableLed(false);
       }

   }

   /*
* This method scales the joystick input so for low joystick values, the
* scaled value is less than linear. This is to make it easier to drive
* the robot more precisely at slower speeds.
*/
   double scaleInput(double dVal) {
       double[] scaleArray = { 0.0, 0.05, 0.09, 0.10, 0.12, 0.15, 0.18, 0.24,
               0.30, 0.36, 0.43, 0.50, 0.60, 0.72, 0.85, 1.00, 1.00 };

       // get the corresponding index for the scaleInput array.
       int index = (int) (dVal * 16.0);
       if (index < 0) {
           index = -index;
       } else if (index > 16) {
           index = 16;
       }

       double dScale = 0.0;
       if (dVal < 0) {
           dScale = -scaleArray[index];
       } else {
           dScale = scaleArray[index];
       }

       return dScale;
   }


   /**
    * Access the left front drive motor's power level.
    */
   double a_left_front_drive_power()
   {
       double l_return = 0.0;
       if (left_front_drv_Motor != null)
       {
           l_return = left_front_drv_Motor.getPower ();
       }

       return l_return;

   } // a_left_drive_power

   /**
    * Access the left back drive motor's power level.
    */
   double a_left_back_drive_power()
   {
       double l_return = 0.0;
       if (left_back_drv_Motor != null)
       {
           l_return = left_back_drv_Motor.getPower ();
       }

       return l_return;

   } // a_left_drive_power

   /**
    * Access the right front drive motor's power level.
    */
   double a_right_front_drive_power ()
   {
       double l_return = 0.0;

       if (right_front_drv_Motor != null)
       {
           l_return = right_front_drv_Motor.getPower ();
       }

       return l_return;

   } // a_right_front_drive_power

   /**
    * Access the right back drive motor's power level.
    */
   double a_right_back_drive_power ()
   {
       double l_return = 0.0;

       if (right_back_drv_Motor != null)
       {
           l_return = right_back_drv_Motor.getPower ();
       }

       return l_return;

   } // a_right_drive_power

   /**
    * Access the Ball Collector left drive motor's power level.
    */
   double a_ball_coll_power ()
   {
       double l_return = 0.0;

     /* if (ball_collect_Motor != null)
      {
          l_return = ball_collect_Motor.getPower ();
      }*/

       return l_return;

   } // a_ball_coll_left_drive_power

   /**
    * Access the lift arm drive motor's power level.
    */
   double a_lift_arm_drive_power ()
   {
       double l_return = 0.0;

       if (extension1 != null)
       {
           l_return = extension1.getPower ();
       }

       return l_return;

   } // a_lift_arm_drive_power */

   /**
    * Access the linear lift drive motor's power level.
    */
   double a_lilear_lift_power ()
   {
       double l_return = 0.0;

       if (linear_lift_Motor != null)
       {
           l_return = linear_lift_Motor.getPower ();
       }

       return l_return;

   } // a_ball_coll_top_drive_power

   /**
    * Access the Ball Collector left drive motor's power level.
    */
   double a_ball_shooter_power ()
   {
       double l_return = 0.0;
       if (extension2 != null)
       {
           l_return = extension2.getPower ();
       }
       return l_return;
   } // a_hor_roller_drive_power

   //--------------------------------------------------------------------------
   //
   // claw_position
   //
   /**
    * Access the claw servo position.
    */
   double a_claw_position ()
   {
       double l_return = 0.0;

       if (claw != null)
       {
           l_return = claw.getPosition ();
       }

       return l_return;

   } // claw_position

   //--------------------------------------------------------------------------
   //
   // set_claw_position
   //
   /**
    * Change the claw position.
    */
   void set_claw_position (double p_position)
   {
       //
       // Ensure the specific value is legal.
       //
       double l_position = Range.clip
               ( p_position
                       //, (Servo.MIN_POSITION)
                       //, Servo.MAX_POSITION
                       // Servo position is restricted to protect from mechanical damage
                       , SERVO_LEFT_MIN
                       , SERVO_LEFT_MAX
               );

       //
       // Set the right right value.
       //
       if (claw != null)
       {
           claw.setPosition (l_position);
       }

   }// set_claw_position

   //--------------------------------------------------------------------------
   //
   // jewel_arm_position
   //
   /**
    * Access the jewel_Arm position.
    */
   double a_jewel_arm_position ()
   {
       double l_return = 0.0;

       if (jewel_arm != null)
       {
           l_return = jewel_arm.getPosition ();
       }

       return l_return;

   } // jewel_arm_position

   //--------------------------------------------------------------------------
   //
   // set_jewel_arm_position
   //
   /**
    * Change the jewel_arm position.
    */
   void set_jewel_arm_position (double p_position)
   {
       //
       // Ensure the specific value is legal.
       //
       double l_position = Range.clip
               ( p_position
                       //, Servo.MIN_POSITION
                       //, Servo.MAX_POSITION
                       // Servo position is restricted to protect from mechanical damage
                       , SERVO_RIGHT_MIN
                       , SERVO_RIGHT_MAX
               );

       //
       // Set the right right value.
       //
       if (jewel_arm != null)
       {
           jewel_arm.setPosition (l_position);
       }

   }// set_jewel_arm_position


   //--------------------------------------------------------------------------
   //
   // gate_position
   //
   /**
    * Access the gate position.
    */
 /* double a_gate_position ()
  {
      double l_return = 0.0;

      if (gate != null)
      {
          l_return = gate.getPosition ();
      }

      return l_return;*/

   // gate_position

   //--------------------------------------------------------------------------
   //
   // set_gate_position
   //
   /**
    * Change the gate position.
    */
   void set_gate_position (double p_position)
   {
       //
       // Ensure the specific value is legal.
       //
       double l_position = Range.clip
               ( p_position
                       , Servo.MIN_POSITION
                       , Servo.MAX_POSITION
               );

       //
       // Set the right right value.
    /*  //
      if (gate != null)
      {
          gate.setPosition (l_position);
      }
*/
   }// set_gate_position


   /***
    *
    * waitForTick implements a periodic delay. However, this acts like a metronome with a regular
    * periodic tick.  This is used to compensate for varying processing times for each cycle.
    * The function looks at the elapsed cycle time, and sleeps for the remaining time interval.
    *
    * @param periodMs  Length of wait cycle in mSec.
    * @throws InterruptedException
    */
   public void waitForTick(long periodMs) throws InterruptedException {

       long  remaining = periodMs - (long)period.milliseconds();

       // sleep for the remaining portion of the regular cycle period.
       if (remaining > 0)
           Thread.sleep(remaining);

       // Reset the cycle clock for the next pass.
       period.reset();
   }
}






